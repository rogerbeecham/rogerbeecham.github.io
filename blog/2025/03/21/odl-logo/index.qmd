---
title: "Designing a course logo in {ggplot2}"
date: 2025-03-24
description: "I've recently started as Programme Lead on our GIScience Distance Learning MSc. Naturally I spent some time playing around with logos. Here's my attempt using {ggplot2} + {sf}, data via {osmdata}. "
title-block-banner: "#32251f"

image: odl_logo.png
twitter-card: 
    image: "odl_logo.png"
open-graph: 
    image: "odl_logo.png"

categories:
  - ggplot
  - osm data

bibliography: references.bib
csl: chicago-author-date.csl

format:
  html:
    shift-heading-level-by: 1
    lightbox: true

doi: 10.59350/b0ppe-4sq67
citation: true
---

```{r}
#| label: setup
#| echo: false
#| eval: true
#| message: false
#| warning: false
library(knitr)
```

## Introduction

Our [Distance Learning GIScience](https://courses.leeds.ac.uk/d985/geographical-information-science-msc) course is pretty established at Leeds. Students enrol part-time and complete it over a 3-year period; the final year is 100% focussed on research (dissertation). The programme draws students from a range of backgrounds and they often combine study with work in industry or government, usually GIScience or adjacent roles. It's a great way to study for an MSc and a pleasure to teach: I run my main [vis course](../../../../../teaching) through the ODL. If you're interested, see [this profile](https://environment.leeds.ac.uk/geography-masters/dir-record/student-alumni-profiles/1651/ilya-ilyankou), by [Ilya Ilyankou](https://ilyankou.com/), a not too distant alumnus.      

As students are remote and never see campus, I wanted to make a logo that anchored a little on Leeds. The idea is not especially original, but I thought using OSM buildings data surrounding campus might be a good idea. Here I render the logo using {ggplot} + {sf}, with OSM data harvested via the excellent [{osmdata}](https://docs.ropensci.org/osmdata/) package.



```{r}
#| eval: true
#| echo: false
#| fig-cap: "The new logo for our GIScience ODL programme."
include_graphics("odl_logo.png", error = FALSE)
```

## Setup and collect OSM data

First, some standard packages as well as [{osmdata}](https://docs.ropensci.org/osmdata/) [@padgham_osmdata_2017], a wrapper to the [Overpass API](https://wiki.openstreetmap.org/wiki/Overpass_API).  


```{r}
#| eval: false
#| echo: true

# General. 
library(tidyverse)
library(here)
library(patchwork)

# Spatial.
library(sf)
library(sp)
library(spdep)
library(nominatimlite)

# OSM
library(osmdata)

# Google font.
library(showtext)
font_add_google("Jost")
showtext_auto()
```


To collect the buildings outlines I generate an Overpass query (`opq()`) paramterised with a bounding box around the university and on the `building` feature. Included in the bounding box are the main university buildings, some surrounding victorian terraces and to the north, [Woodhouse Moor Park](https://en.wikipedia.org/wiki/Woodhouse_Moor), of course with no buildings. 

```{r}
#| eval: true
#| echo: false
#| fig-cap: "Building polygons returned by the Overpass query."
include_graphics("buildings.svg", error = FALSE)
```


The bounding box is created as a [simple features](https://r-spatial.github.io/sf/) geometry object with `bbox_to_poly()`. I return from this query a simple features geometry object (`osmdata_sf()`); select out the polygon data only; and express coordinates  in [British National Grid](https://en.wikipedia.org/wiki/Ordnance_Survey_National_Grid) space (`crs=27700`).

```{r}
#| eval: false
#| echo: true

# Search area around University of Leeds (long-lat).
bbox <- c(-1.5692, 53.8014, -1.5451, 53.8157)
bbox_sf <- bbox_to_poly(bbox)

# Get buildings within bbox.
leeds_buildings <- bbox_sf |>
  opq() |>
  add_osm_feature(key = "building") |>
  osmdata_sf() 

# Extract osm_polyogns.
leeds_buildings <- leeds_buildings$osm_polygon |> st_transform(crs=27700)
```


## Adding a stylised circular mask

 I used {ggplot}, with `geom_sf()`, to render the simple features geometry file.  You will see that all buildings intersecting the bounding box are returned by the Overpass query. 
 
 For the logo, I wanted a circular crop that you often see with stylised maps.  There are different ways to effect this. Without giving this too much consideration, I generated a polygon object to overlay on the map itself -- so defined in the same coordinate space as the map. 

```{r}
#| eval: true
#| echo: false
#| fig-cap: "Building polygons overlaid with a circular mask (a polygon-with-a-hole)."
include_graphics("buildings_crop.svg", error = FALSE)
```


Generating this cutout object is quite straightforward. I find centroid coordinates of the buildings and record the width and height of that box. Then I create a squarified polygon, with `st_buffer()` centred on the buildings, but slightly *larger* than its spatial extent; a circular polygon slightly *smaller* than the bounding box; and use the function `st_sym_difference()` to put a hole in the larger (square) polygon.   

```{r}
#| eval: false
#| echo: true

# Search area around University of Leeds (long-lat).
# And bbox around osm_polygons.
buildings_box <- st_bbox(leeds_buildings)
buildings_width <- buildings_box$xmax-buildings_box$xmin
buildings_height <- buildings_box$ymax-buildings_box$ymin

# Create a circular buffer around centroid of buildings.
x <- buildings_box$xmin + .5*buildings_width
y <- buildings_box$ymin + .5*buildings_height

# Create an overlay to effect a curcular crop.
t <- st_buffer(st_as_sf(tibble(x,y), coords=c(1,2), crs=27700), dist=buildings_width*.51, endCapStyle="SQUARE")
u <- st_buffer(st_as_sf(tibble(x,y), coords=c(1,2), crs=27700), dist=buildings_width*.42)
v <- st_sym_difference(u,t)
```

## Plotting the polygon files

The {ggplot2} code is pretty paired back: `geom_sf()` will draw out the polygon files. I just make sure to layer the plot specification such that the circular mask (rendered solid white `#ffffff`) appears after the buildings. 

```{r}
#| eval: false
#| echo: true

# Sample 1:4 for each row of the buildings dataset.
randoms <- map_dbl(1:nrow(leeds_buildings), ~sample(1:4,1))
plot <- leeds_buildings |>
  # Add in the sampled colour positions. Factor variable, for use in manual scale.
  mutate(colour=factor(randoms)) |>
  ggplot() +
  # Draw buildings.
  geom_sf(aes(fill=colour, colour=colour)) +
  # Draw mask.
  geom_sf(data=v, fill="#ffffff", colour="#ffffff") +
  # Du Bois palette.
  scale_colour_manual(values=c( "#e94837", "#393a68", "#f3b241", "#190f11"), guide="none") +
  scale_fill_manual(values=c( "#e94837", "#393a68", "#f3b241", "#190f11"), guide="none") 
```


On **colour**,  I used a [Du Bois](https://www.smithsonianmag.com/history/first-time-together-and-color-book-displays-web-du-bois-visionary-infographics-180970826/)-inspired palette. It is beautiful, but also reflects wider efforts across the School of Geography to decolonise our programmes [see also @olman_decolonizing_2022]. 

```{r}
#| eval: true
#| echo: false
#| fig-cap: "Building polygons coloured using a Du Bois-inspired palette."
include_graphics("buildings_colour.svg", error = FALSE)
```

To do this, I `scale_fill_manual()` with the hex codes of four Du Bois colours.  I wanted to randomly colour buildings and so, for each building (row of the `leeds_buildings` dataset), randomly sample integer values from 1:4 and create a new column (`colour`) with these values. When passing this column to `aes(fill=)` and applying a manual colour scale, it must not be a numeric variable and so I cast `colour` as a [factor](https://r4ds.had.co.nz/factors.html).

## Inserting the programme name and other text

Again, many different ways of doing this. Here, I cast the  buildings object (`plot`) as a grob and add it as a ggplot2 layer with `annotation_custom()`. I can now position the text in relative plot space, rather than working in geographic coordinate space. 

The text labels are generated with `annotate()` and manually positioned and sized with some trial-and-error. Note that I extent the plot space, with `scale_x_manual()`, in order to accomodate the course title. 

```{r}
#| eval: false
#| echo: true
ggplot() +
  # Add buildings as a plot layer, rescaled in plot coordinate space.
  annotation_custom(cowplot::as_grob(p), 0, 1, 0, 1) +
  # Add programme name.
  annotate("text", label="GISc",
    x=1, y=.78,  hjust="left", vjust="top", size=220, colour="#190f11") +
  annotate("text", label="Distance Learning", 
    x=1, y=.4,   hjust="left", vjust="top", size=70, colour="#190f11") +
  annotate(
    "text", label="School of Geography | University of Leeds",  
    x=1, y=.25, hjust="left", vjust="top", size=30, colour="#190f11") +
  # Extend plot in x to accomodate labels.
  scale_x_continuous(limits=c(0,3), expand=c(0,0)) +
  scale_y_continuous(limits=c(0, 1), expand=c(0,0)) 
```